package org.yrti.order.kafka;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;
import org.yrti.order.client.UserClient;
import org.yrti.order.dto.UserResponse;
import org.yrti.order.event.OrderPaidEvent;
import org.yrti.order.event.PaymentEvent;
import org.yrti.order.service.OrderService;


@Slf4j
@Component
@RequiredArgsConstructor
public class PaymentEventListener {

    private final UserClient userClient;
    private final OrderPaidEventPublisher orderPaidEventPublisher;
    private final OrderService orderService;

    @KafkaListener(topics = "payment-created", groupId = "order-group")
    public void handlePaymentCreated(PaymentEvent event) {
        log.info("üí≥ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã: {}", event);

        if (!event.isSuccess()) {
            log.warn("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{} –Ω–µ –ø—Ä–æ—à–ª–∞", event.getOrderId());
            return;
        }

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            orderService.markOrderAsPaid(event.getOrderId());

            // –ü–æ–ª—É—á–∞–µ–º email
            UserResponse user = userClient.getUserById(event.getUserId());

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            OrderPaidEvent paidEvent = OrderPaidEvent.builder()
                    .orderId(event.getOrderId())
                    .userId(event.getUserId())
                    .email(user.getEmail())
                    .amount(event.getAmount())
                    .build();

            orderPaidEventPublisher.publish(paidEvent);
            log.info("üì® –°–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka: {}", paidEvent);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã: {}", e.getMessage(), e);
        }
    }
}