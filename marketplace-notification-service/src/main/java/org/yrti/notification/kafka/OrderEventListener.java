package org.yrti.notification.kafka;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;
import org.yrti.events.event.OrderCreatedEvent;
import org.yrti.events.event.OrderDeliveredEvent;
import org.yrti.events.event.OrderPaidEvent;
import org.yrti.notification.service.EmailService;

@Slf4j
@Service
@RequiredArgsConstructor
public class OrderEventListener {

    private final EmailService emailService;

    @KafkaListener(topics = "order-created", groupId = "notification-group")
    public void handleOrderCreated(OrderCreatedEvent event) {
        log.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {}", event);

        String to = event.getEmail();
        String subject = "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω";
        String body = "–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ" + event.getOrderId() + " —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!";

        try {
            log.info("üì® –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {}", to);
            emailService.send(to, subject, body);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {}", e.getMessage(), e);
        }

    }
    @KafkaListener(topics = "order-paid", groupId = "notification-group")
    public void handleOrderPaid(OrderPaidEvent event) {
        log.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞: {}", event);

        String to = event.getEmail();
        String subject = "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞";
        String body = "–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ" + event.getOrderId() + " —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω –Ω–∞ —Å—É–º–º—É " +
                event.getAmount() + "‚ÇΩ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!";

        try {
            log.info("üì® –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å —á–µ–∫–æ–º –Ω–∞ {}", to);
            emailService.send(to, subject, body);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ —Å —á–µ–∫–æ–º: {}", e.getMessage(), e);
        }
    }

    @KafkaListener(topics = "order-delivered", groupId = "notification-group")
    public void handleOrderDelivered(OrderDeliveredEvent event) {
        log.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {}", event);

        String to = event.getEmail();
        String subject = "–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!";
        String body = "–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ" + event.getOrderId() + " —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–Ω—è!";

        try {
            emailService.send(to, subject, body);
            log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {}", to);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –æ –¥–æ—Å—Ç–∞–≤–∫–µ: {}", e.getMessage(), e);
        }
    }
}
